/*
 * Anna Vilanova: Basic user interface for the raycaster. NO MODIFICATION NEEDED 
 *
 *
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tudelft.cgv.gui;

import java.awt.BorderLayout;
import tudelft.cgv.volvis.RaycastRenderer;
import javax.swing.JColorChooser;
import java.awt.Color;
import tudelft.cgv.util.VectorMath;
import tudelft.cgv.volvis.TFColor;

/**
 *
 * @author michel
 */
public class RaycastRendererPanel extends javax.swing.JPanel {

    RaycastRenderer renderer;
    TransferFunctionEditor tfEditor = null;
    TransferFunction2DEditor tfEditor2D = null;
    
    /**
     * Creates new form RaycastRendererPanel
     */
    public RaycastRendererPanel(RaycastRenderer renderer) {
        initComponents();
        this.renderer = renderer;
        IsovalueTextBox.setText(Float.toString(renderer.getIsoValue()));
        colorButton.setBackground(new Color(255,255,0));
    }

    public void setSpeedLabel(String text) {
        renderingSpeedLabel.setText(text);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        renderingSpeedLabel = new javax.swing.JLabel();
        slicerButton = new javax.swing.JRadioButton();
        mipButton = new javax.swing.JRadioButton();
        compositingButton = new javax.swing.JRadioButton();
        tf2dButton = new javax.swing.JRadioButton();
        shadingCheckbox = new javax.swing.JCheckBox();
        IsoSurface = new javax.swing.JRadioButton();
        IsovalueTextBox = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Resolution = new javax.swing.JSlider();
        Resolution_label = new javax.swing.JLabel();
        colorButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        silhoeutteCheckBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        baseOpacity = new javax.swing.JTextField();
        sharpness = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        XScrollbar = new javax.swing.JScrollBar();
        YScrollbar = new javax.swing.JScrollBar();
        ZScrollbar = new javax.swing.JScrollBar();

        jScrollPane1.setViewportView(jTree1);

        jLabel1.setText("Rendering time (ms):");

        renderingSpeedLabel.setText("jLabel2");

        buttonGroup1.add(slicerButton);
        slicerButton.setSelected(true);
        slicerButton.setText("Slicer");
        slicerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slicerButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(mipButton);
        mipButton.setText("MIP");
        mipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mipButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(compositingButton);
        compositingButton.setText("Compositing");
        compositingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compositingButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(tf2dButton);
        tf2dButton.setText("2D Transfer function");
        tf2dButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf2dButtonActionPerformed(evt);
            }
        });

        shadingCheckbox.setText("Volume shading");
        shadingCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shadingCheckboxActionPerformed(evt);
            }
        });

        buttonGroup1.add(IsoSurface);
        IsoSurface.setText("IsoSurface Rendering");
        IsoSurface.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IsoSurfaceActionPerformed(evt);
            }
        });

        IsovalueTextBox.setText("0");
        IsovalueTextBox.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        IsovalueTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IsovalueTextBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Isovalue:");

        Resolution.setMajorTickSpacing(1);
        Resolution.setMaximum(4);
        Resolution.setMinimum(1);
        Resolution.setMinorTickSpacing(1);
        Resolution.setPaintLabels(true);
        Resolution.setPaintTicks(true);
        Resolution.setSnapToTicks(true);
        Resolution.setToolTipText("");
        Resolution.setValue(1);
        Resolution.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ResolutionMouseReleased(evt);
            }
        });

        Resolution_label.setText("Resolution");

        colorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Color");

        silhoeutteCheckBox.setText("Silhouette mode:");
        silhoeutteCheckBox.setToolTipText("");
        silhoeutteCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                silhoeutteCheckBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Base opacity:");

        baseOpacity.setText("0");
        baseOpacity.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        baseOpacity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseOpacityActionPerformed(evt);
            }
        });

        sharpness.setText("0");
        sharpness.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        sharpness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sharpnessActionPerformed(evt);
            }
        });

        jLabel5.setText("Sharpness:");

        jLabel13.setText("Light vector (normalized):");

        XScrollbar.setMinimum(-100);
        XScrollbar.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        XScrollbar.setToolTipText("");
        XScrollbar.setVisibleAmount(0);
        XScrollbar.setPreferredSize(new java.awt.Dimension(30, 15));
        XScrollbar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                XScrollbarMouseReleased(evt);
            }
        });

        YScrollbar.setMinimum(-100);
        YScrollbar.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        YScrollbar.setVisibleAmount(0);
        YScrollbar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                YScrollbarMouseReleased(evt);
            }
        });

        ZScrollbar.setMinimum(-100);
        ZScrollbar.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        ZScrollbar.setVisibleAmount(0);
        ZScrollbar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ZScrollbarMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(renderingSpeedLabel)
                                .addGap(304, 304, 304))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(62, 62, 62)
                                        .addComponent(silhoeutteCheckBox))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(shadingCheckbox)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel13)
                                                .addComponent(Resolution_label))
                                            .addGap(30, 30, 30))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ZScrollbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(YScrollbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addGap(32, 32, 32)
                                            .addComponent(sharpness, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(100, 100, 100)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(baseOpacity, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(IsovalueTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(XScrollbar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(311, 350, Short.MAX_VALUE))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(218, 218, 218)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2))
                            .addGap(63, 63, 63)
                            .addComponent(jLabel6)
                            .addGap(18, 18, 18)
                            .addComponent(colorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(199, 199, 199)
                            .addComponent(Resolution, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(tf2dButton))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(slicerButton))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(mipButton))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(compositingButton))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(IsoSurface))))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(renderingSpeedLabel))
                .addGap(49, 49, 49)
                .addComponent(slicerButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mipButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IsoSurface)
                            .addComponent(colorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(IsovalueTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(compositingButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tf2dButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(baseOpacity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(silhoeutteCheckBox)))
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(sharpness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(shadingCheckbox)))
                        .addGap(41, 41, 41)
                        .addComponent(jLabel13))
                    .addComponent(XScrollbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(YScrollbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(ZScrollbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 203, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Resolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Resolution_label))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mipButtonActionPerformed
        renderer.setMIPMode();
    }//GEN-LAST:event_mipButtonActionPerformed

    private void slicerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slicerButtonActionPerformed
        renderer.setSlicerMode();
    }//GEN-LAST:event_slicerButtonActionPerformed

    private void compositingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compositingButtonActionPerformed
        renderer.setCompositingMode();
    }//GEN-LAST:event_compositingButtonActionPerformed

    private void tf2dButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf2dButtonActionPerformed
        renderer.setTF2DMode();
    }//GEN-LAST:event_tf2dButtonActionPerformed

    private void IsoSurfaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IsoSurfaceActionPerformed
        // TODO add your handling code here:
        renderer.setIsoSurfaceMode();
    }//GEN-LAST:event_IsoSurfaceActionPerformed

    private void IsovalueTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IsovalueTextBoxActionPerformed
        // TODO add your handling code here:
        String s=this.IsovalueTextBox.getText();
        renderer.setIsoValue(Float.parseFloat(s));//set value
    }//GEN-LAST:event_IsovalueTextBoxActionPerformed

    private void ResolutionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResolutionMouseReleased
        // TODO add your handling code here:
        renderer.setResFactor(this.Resolution.getValue());
    }//GEN-LAST:event_ResolutionMouseReleased

    private void colorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorButtonActionPerformed
        // Change the color in the transfer function.
        Color newColor = JColorChooser.showDialog(this, "Choose color", colorButton.getBackground());
        if (newColor != null) {
            colorButton.setBackground(newColor);
            TFColor isoColor=new TFColor();
            isoColor.r = newColor.getRed() / 255.0;
            isoColor.g = newColor.getGreen() / 255.0;
            isoColor.b = newColor.getBlue() / 255.0;
            renderer.setIsoColor(isoColor);
        }
    }//GEN-LAST:event_colorButtonActionPerformed

    private void silhoeutteCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_silhoeutteCheckBoxActionPerformed
        try {
            renderer.setSilhouetteSettings(
                    silhoeutteCheckBox.isSelected(), 
                    Float.parseFloat(this.baseOpacity.getText()),
                    Float.parseFloat(sharpness.getText()));
        } catch (NumberFormatException e) { }  
    }//GEN-LAST:event_silhoeutteCheckBoxActionPerformed

    private void baseOpacityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseOpacityActionPerformed
        try {
            renderer.setSilhouetteSettings(
                    silhoeutteCheckBox.isSelected(), 
                    Float.parseFloat(this.baseOpacity.getText()),
                    Float.parseFloat(this.sharpness.getText()));
        } catch (NumberFormatException e) { }  
    }//GEN-LAST:event_baseOpacityActionPerformed

    private void sharpnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sharpnessActionPerformed
        try {
            renderer.setSilhouetteSettings(
                    silhoeutteCheckBox.isSelected(), 
                    Float.parseFloat(this.baseOpacity.getText()), 
                    Float.parseFloat(this.sharpness.getText()));
        } catch (NumberFormatException e) { }  
    }//GEN-LAST:event_sharpnessActionPerformed

    private void shadingCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shadingCheckboxActionPerformed
        renderer.setShadingMode(shadingCheckbox.isSelected());
        
        // Setting light vector (if shading box is (re)selected).
        double xValue = XScrollbar.getValue();
        double yValue = YScrollbar.getValue();
        double zValue = ZScrollbar.getValue();
        // Value of scrollbars is between -100 and 100. We do not allow zero values.
        xValue = xValue < 0 ? -1 : 1;
        yValue = yValue < 0 ? -1 : 1;
        zValue = zValue < 0 ? -1 : 1;
        double[] lightVector = {
            xValue,
            yValue,
            zValue};
        renderer.setNormalLightVector(lightVector);
    }//GEN-LAST:event_shadingCheckboxActionPerformed

    // Sets the light vector to the current values specified by x, y and z scrollbar.
    private void XScrollbarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_XScrollbarMouseReleased
            // Value of scrollbar is between -100 and 100. We do not allow zero values.
            double xValue = XScrollbar.getValue();
            if(xValue == 0) {
                xValue = xValue < 0 ? -1 : 1;
            }
            double[] lightVector = {
                xValue,
                YScrollbar.getValue(),
                ZScrollbar.getValue()};
        renderer.setNormalLightVector(lightVector);
    }//GEN-LAST:event_XScrollbarMouseReleased

    // Sets the light vector to the current values specified by x, y and z scrollbar.
    private void YScrollbarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_YScrollbarMouseReleased
            // Value of scrollbar is between -100 and 100. We do not allow zero values.
            double yValue = YScrollbar.getValue();
            if(yValue == 0) {
                yValue = yValue < 0 ? -1 : 1;
            }
            double[] lightVector = {
                XScrollbar.getValue(),
                yValue,
                ZScrollbar.getValue()};
        renderer.setNormalLightVector(lightVector);
    }//GEN-LAST:event_YScrollbarMouseReleased

    // Sets the light vector to the current values specified by x, y and z scrollbar.
    private void ZScrollbarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ZScrollbarMouseReleased
            // Value of scrollbar is between -100 and 100. We do not allow zero values.
            double zValue = ZScrollbar.getValue();
            if(zValue == 0) {
                zValue = zValue < 0 ? -1 : 1;
            }
            double[] lightVector = {
                XScrollbar.getValue(),
                YScrollbar.getValue(),
                zValue};
        renderer.setNormalLightVector(lightVector);
    }//GEN-LAST:event_ZScrollbarMouseReleased

        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton IsoSurface;
    private javax.swing.JTextField IsovalueTextBox;
    private javax.swing.JSlider Resolution;
    private javax.swing.JLabel Resolution_label;
    private javax.swing.JScrollBar XScrollbar;
    private javax.swing.JScrollBar YScrollbar;
    private javax.swing.JScrollBar ZScrollbar;
    private javax.swing.JTextField baseOpacity;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton colorButton;
    private javax.swing.JRadioButton compositingButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JRadioButton mipButton;
    private javax.swing.JLabel renderingSpeedLabel;
    private javax.swing.JCheckBox shadingCheckbox;
    private javax.swing.JTextField sharpness;
    private javax.swing.JCheckBox silhoeutteCheckBox;
    private javax.swing.JRadioButton slicerButton;
    private javax.swing.JRadioButton tf2dButton;
    // End of variables declaration//GEN-END:variables
}
